===========================
step 1
lua ProjectDIR/src/lmod.in.lua bash --regression_testing --version
===========================
Modules based on Lua: Version 8.7.3  2022-05-23 14:19 -05:00
    by Robert McLay mclay@tacc.utexas.edu
===========================
step 2
lua ProjectDIR/src/lmod.in.lua bash --regression_testing load intel
===========================
===========================
step 3
lua ProjectDIR/src/lmod.in.lua bash --regression_testing avail
===========================
ProjectDIR/rt/avail/mf/Compiler/intel/10.1
   gotoblas/1.31        gotoblas/1.33    openmpi/1.2.6
   gotoblas/1.32 (D)    mpich2/1.0.7
ProjectDIR/rt/avail/mf/Core
   PrgEnv                 git/1.7.4.1          local/1.2
   admin/admin-1.0        git/1.7.4.2          local/1.3    (D)
   alex/1.0               git/1.7.4.3   (D)    local/1.4
   bar/1.4-dbg            gotoblas/1.20        multi/multi
   bar/1.4         (D)    gotoblas/1.26        noweb/2.10c
   baz/1.4-dbg            gotoblas/1.30        parmetis/3.1 (m)
   baz/1.4         (D)    intel/intel   (L)    ucc/12.1.5
   foo/1.4-dbg            junk/a/c/1.0         ucc/13.1.2   (D)
   foo/1.4         (D)    junk/b/c/2.0         ucc/14.0.2
   gcc/4.2.3              junk/d/3.0           unix/unix
   git/1.6.3.1            local/local
   git/1.7.4              local/1.1
  Where:
   D:  Default Module
   L:  Module is loaded
   m:  built for host and native MIC
If the avail list is too long consider trying:
"module --default avail" or "ml -d av" to just list the default modules.
"module overview" or "ml ov" to display the number of modules for each name.
Use "module spider" to find all possible modules and extensions.
Use "module keyword key1 key2 ..." to search for all possible modules matching any of the "keys".
===========================
step 4
lua ProjectDIR/src/lmod.in.lua bash --regression_testing avail gcc intel p a j m
===========================
ProjectDIR/rt/avail/mf/Compiler/intel/10.1
   gotoblas/1.31        gotoblas/1.33    openmpi/1.2.6
   gotoblas/1.32 (D)    mpich2/1.0.7
ProjectDIR/rt/avail/mf/Core
   PrgEnv                 gotoblas/1.20        local/1.1
   admin/admin-1.0        gotoblas/1.26        local/1.2
   alex/1.0               gotoblas/1.30        local/1.3    (D)
   bar/1.4-dbg            intel/intel   (L)    local/1.4
   bar/1.4         (D)    junk/a/c/1.0         multi/multi
   baz/1.4-dbg            junk/b/c/2.0         parmetis/3.1 (m)
   baz/1.4         (D)    junk/d/3.0
   gcc/4.2.3              local/local
  Where:
   D:  Default Module
   L:  Module is loaded
   m:  built for host and native MIC
If the avail list is too long consider trying:
"module --default avail" or "ml -d av" to just list the default modules.
"module overview" or "ml ov" to display the number of modules for each name.
Use "module spider" to find all possible modules and extensions.
Use "module keyword key1 key2 ..." to search for all possible modules matching any of the "keys".
===========================
step 5
lua ProjectDIR/src/lmod.in.lua bash --regression_testing unload intel
===========================
===========================
step 6
lua ProjectDIR/src/lmod.in.lua bash --regression_testing avail
===========================
ProjectDIR/rt/avail/mf/Core
   PrgEnv                 git/1.7.4.1          local/1.2
   admin/admin-1.0        git/1.7.4.2          local/1.3    (D)
   alex/1.0               git/1.7.4.3   (D)    local/1.4
   bar/1.4-dbg            gotoblas/1.20        multi/multi
   bar/1.4         (D)    gotoblas/1.26 (D)    noweb/2.10c
   baz/1.4-dbg            gotoblas/1.30        parmetis/3.1 (m)
   baz/1.4         (D)    intel/intel          ucc/12.1.5
   foo/1.4-dbg            junk/a/c/1.0         ucc/13.1.2   (D)
   foo/1.4         (D)    junk/b/c/2.0         ucc/14.0.2
   gcc/4.2.3              junk/d/3.0           unix/unix
   git/1.6.3.1            local/local
   git/1.7.4              local/1.1
  Where:
   D:  Default Module
   m:  built for host and native MIC
If the avail list is too long consider trying:
"module --default avail" or "ml -d av" to just list the default modules.
"module overview" or "ml ov" to display the number of modules for each name.
Use "module spider" to find all possible modules and extensions.
Use "module keyword key1 key2 ..." to search for all possible modules matching any of the "keys".
===========================
step 7
lua ProjectDIR/src/lmod.in.lua bash --regression_testing --show_hidden avail
===========================
ProjectDIR/rt/avail/mf/Core
   .base/bar/1.4-dbg (H)    gcc/4.2.3            junk/d/3.0
   .base/bar/1.4     (H)    git/1.6.3.1          local/local
   .base/baz/1.4-dbg (H)    git/1.7.4            local/1.1
   .base/baz/1.4     (H)    git/1.7.4.1          local/1.2
   PrgEnv                   git/1.7.4.2          local/1.3    (D)
   admin/admin-1.0          git/1.7.4.3   (D)    local/1.4
   alex/1.0                 gotoblas/1.20        multi/multi
   bar/1.4-dbg              gotoblas/1.26 (D)    noweb/2.10c
   bar/1.4           (D)    gotoblas/1.30        parmetis/3.1 (m)
   baz/1.4-dbg              hidden/.1.0   (H)    ucc/12.1.5
   baz/1.4           (D)    intel/intel          ucc/13.1.2   (D)
   foo/1.4-dbg              junk/a/c/1.0         ucc/14.0.2
   foo/1.4           (D)    junk/b/c/2.0         unix/unix
  Where:
   D:  Default Module
   H:  Hidden Module
   m:  built for host and native MIC
If the avail list is too long consider trying:
"module --default avail" or "ml -d av" to just list the default modules.
"module overview" or "ml ov" to display the number of modules for each name.
Use "module spider" to find all possible modules and extensions.
Use "module keyword key1 key2 ..." to search for all possible modules matching any of the "keys".
===========================
step 8
lua ProjectDIR/src/lmod.in.lua bash --regression_testing -t avail
===========================
ProjectDIR/rt/avail/mf/Core:
PrgEnv
admin/
admin/admin-1.0
alex/
alex/1.0
bar/
bar/1.4-dbg
bar/1.4
baz/
baz/1.4-dbg
baz/1.4
foo/
foo/1.4-dbg
foo/1.4
gcc/
gcc/4.2.3
git/
git/1.6.3.1
git/1.7.4
git/1.7.4.1
git/1.7.4.2
git/1.7.4.3
gotoblas/
gotoblas/1.20
gotoblas/1.26
gotoblas/1.30
intel/
intel/intel
junk/a/c/
junk/a/c/1.0
junk/b/c/
junk/b/c/2.0
junk/d/
junk/d/3.0
local/
local/local
local/1.1
local/1.2
local/1.3
local/1.4
multi/
multi/multi
noweb/
noweb/2.10c
parmetis/
parmetis/3.1
ucc/
ucc/12.1.5
ucc/13.1.2
ucc/14.0.2
unix/
unix/unix
===========================
step 9
lua ProjectDIR/src/lmod.in.lua bash --regression_testing -t --show_hidden avail
===========================
ProjectDIR/rt/avail/mf/Core:
.base/bar/
.base/bar/1.4-dbg
.base/bar/1.4
.base/baz/
.base/baz/1.4-dbg
.base/baz/1.4
PrgEnv
admin/
admin/admin-1.0
alex/
alex/1.0
bar/
bar/1.4-dbg
bar/1.4
baz/
baz/1.4-dbg
baz/1.4
foo/
foo/1.4-dbg
foo/1.4
gcc/
gcc/4.2.3
git/
git/1.6.3.1
git/1.7.4
git/1.7.4.1
git/1.7.4.2
git/1.7.4.3
gotoblas/
gotoblas/1.20
gotoblas/1.26
gotoblas/1.30
hidden/
hidden/.1.0
intel/
intel/intel
junk/a/c/
junk/a/c/1.0
junk/b/c/
junk/b/c/2.0
junk/d/
junk/d/3.0
local/
local/local
local/1.1
local/1.2
local/1.3
local/1.4
multi/
multi/multi
noweb/
noweb/2.10c
parmetis/
parmetis/3.1
ucc/
ucc/12.1.5
ucc/13.1.2
ucc/14.0.2
unix/
unix/unix
===========================
step 10
lua ProjectDIR/src/lmod.in.lua bash --regression_testing -t -d avail
===========================
ProjectDIR/rt/avail/mf/Core:
PrgEnv
admin/admin-1.0
alex/1.0
bar/1.4
baz/1.4
foo/1.4
gcc/4.2.3
git/1.7.4.3
gotoblas/1.26
intel/intel
junk/a/c/1.0
junk/b/c/2.0
junk/d/3.0
local/1.3
multi/multi
noweb/2.10c
parmetis/3.1
ucc/13.1.2
unix/unix
===========================
step 11
lua ProjectDIR/src/lmod.in.lua bash --regression_testing -t avail git
===========================
ProjectDIR/rt/avail/mf/Core:
git/1.6.3.1
git/1.7.4
git/1.7.4.1
git/1.7.4.2
git/1.7.4.3
===========================
step 12
lua ProjectDIR/src/lmod.in.lua bash --regression_testing -t -d avail git
===========================
ProjectDIR/rt/avail/mf/Core:
git/1.7.4.3
===========================
step 13
lua ProjectDIR/src/lmod.in.lua bash --regression_testing -t avail git/1.7.4.3
===========================
ProjectDIR/rt/avail/mf/Core:
git/1.7.4.3
===========================
step 14
lua ProjectDIR/src/lmod.in.lua bash --regression_testing use ProjectDIR/rt/avail/mf/Core2
===========================
===========================
step 15
lua ProjectDIR/src/lmod.in.lua bash --regression_testing avail local
===========================
ProjectDIR/rt/avail/mf/Core2
   local
ProjectDIR/rt/avail/mf/Core
   local/local    local/1.1    local/1.2    local/1.3 (D)    local/1.4
  Where:
   D:  Default Module
If the avail list is too long consider trying:
"module --default avail" or "ml -d av" to just list the default modules.
"module overview" or "ml ov" to display the number of modules for each name.
Use "module spider" to find all possible modules and extensions.
Use "module keyword key1 key2 ..." to search for all possible modules matching any of the "keys".
===========================
step 16
lua ProjectDIR/src/lmod.in.lua bash --regression_testing --ignore_cache avail
===========================
ProjectDIR/rt/avail/mf/Core2
   local
ProjectDIR/rt/avail/mf/Core
   PrgEnv                 git/1.7.4.1          local/1.2
   admin/admin-1.0        git/1.7.4.2          local/1.3    (D)
   alex/1.0               git/1.7.4.3   (D)    local/1.4
   bar/1.4-dbg            gotoblas/1.20        multi/multi
   bar/1.4         (D)    gotoblas/1.26 (D)    noweb/2.10c
   baz/1.4-dbg            gotoblas/1.30        parmetis/3.1 (m)
   baz/1.4         (D)    intel/intel          ucc/12.1.5
   foo/1.4-dbg            junk/a/c/1.0         ucc/13.1.2   (D)
   foo/1.4         (D)    junk/b/c/2.0         ucc/14.0.2
   gcc/4.2.3              junk/d/3.0           unix/unix
   git/1.6.3.1            local/local
   git/1.7.4              local/1.1
  Where:
   D:  Default Module
   m:  built for host and native MIC
If the avail list is too long consider trying:
"module --default avail" or "ml -d av" to just list the default modules.
"module overview" or "ml ov" to display the number of modules for each name.
Use "module spider" to find all possible modules and extensions.
Use "module keyword key1 key2 ..." to search for all possible modules matching any of the "keys".
===========================
step 17
lua ProjectDIR/src/lmod.in.lua bash --regression_testing overview
===========================
ProjectDIR/rt/avail/mf/Core2
local (1)
ProjectDIR/rt/avail/mf/Core
PrgEnv (1)   baz (2)   gotoblas (3)   junk/d (1)   parmetis (1)
admin  (1)   foo (2)   intel    (1)   local  (5)   ucc      (3)
alex   (1)   gcc (1)   junk/a/c (1)   multi  (1)   unix     (1)
bar    (2)   git (5)   junk/b/c (1)   noweb  (1)
===========================
step 18
lua ProjectDIR/src/lmod.in.lua bash --regression_testing purge
===========================
===========================
step 19
lua ProjectDIR/src/lmod.in.lua bash --regression_testing avail
===========================
Lmod has detected the following error: module avail is not possible. MODULEPATH is not set or not set with valid paths.
===========================
step 20
lua ProjectDIR/src/lmod.in.lua bash --regression_testing avail
===========================
ProjectDIR/rt/avail/mf/Core3
   TACC    intel/14.0.0    intel/14.0.3    intel/15.0.1 (D)    intel/15.0.2
  Where:
   D:  Default Module
If the avail list is too long consider trying:
"module --default avail" or "ml -d av" to just list the default modules.
"module overview" or "ml ov" to display the number of modules for each name.
Use "module spider" to find all possible modules and extensions.
Use "module keyword key1 key2 ..." to search for all possible modules matching any of the "keys".
===========================
step 21
lua ProjectDIR/src/lmod.in.lua bash --regression_testing load TACC
===========================
===========================
step 22
lua ProjectDIR/src/lmod.in.lua bash --regression_testing load intel/15.0.2
===========================
===========================
step 23
lua ProjectDIR/src/lmod.in.lua bash --regression_testing load intel
===========================
The following have been reloaded with a version change:
  1) intel/15.0.2 => intel/15.0.1
===========================
step 24
lua ProjectDIR/src/lmod.in.lua bash --regression_testing use ProjectDIR/rt/avail/mf/Core4
===========================
===========================
step 25
lua ProjectDIR/src/lmod.in.lua bash --regression_testing avail
===========================
ProjectDIR/rt/avail/mf/Core4
   ncurses/5.9-GCC-4.7.2
ProjectDIR/rt/avail/mf/Core3
   TACC         (L)    intel/14.0.3          intel/15.0.2
   intel/14.0.0        intel/15.0.1 (L,D)
  Where:
   D:  Default Module
   L:  Module is loaded
If the avail list is too long consider trying:
"module --default avail" or "ml -d av" to just list the default modules.
"module overview" or "ml ov" to display the number of modules for each name.
Use "module spider" to find all possible modules and extensions.
Use "module keyword key1 key2 ..." to search for all possible modules matching any of the "keys".
===========================
step 26
lua ProjectDIR/src/lmod.in.lua bash --regression_testing use ProjectDIR/rt/avail/mf/Order
===========================
===========================
step 27
lua ProjectDIR/src/lmod.in.lua bash --regression_testing avail
===========================
ProjectDIR/rt/avail/mf/Order
   a/5.9    a/5.10    a/9.0    a/10.0 (D)
ProjectDIR/rt/avail/mf/Core4
   ncurses/5.9-GCC-4.7.2
ProjectDIR/rt/avail/mf/Core3
   TACC         (L)    intel/14.0.3          intel/15.0.2
   intel/14.0.0        intel/15.0.1 (L,D)
  Where:
   D:  Default Module
   L:  Module is loaded
If the avail list is too long consider trying:
"module --default avail" or "ml -d av" to just list the default modules.
"module overview" or "ml ov" to display the number of modules for each name.
Use "module spider" to find all possible modules and extensions.
Use "module keyword key1 key2 ..." to search for all possible modules matching any of the "keys".
===========================
step 28
lua ProjectDIR/src/lmod.in.lua bash --regression_testing use ProjectDIR/rt/avail/mf/Core6
===========================
===========================
step 29
lua ProjectDIR/src/lmod.in.lua bash --regression_testing avail
===========================
ProjectDIR/rt/avail/mf/Core6
   aaa/2.0
ProjectDIR/rt/avail/mf/Order
   a/5.9    a/5.10    a/9.0    a/10.0 (D)
ProjectDIR/rt/avail/mf/Core4
   ncurses/5.9-GCC-4.7.2
ProjectDIR/rt/avail/mf/Core3
   TACC         (L)    intel/14.0.3          intel/15.0.2
   intel/14.0.0        intel/15.0.1 (L,D)
  Where:
   D:  Default Module
   L:  Module is loaded
If the avail list is too long consider trying:
"module --default avail" or "ml -d av" to just list the default modules.
"module overview" or "ml ov" to display the number of modules for each name.
Use "module spider" to find all possible modules and extensions.
Use "module keyword key1 key2 ..." to search for all possible modules matching any of the "keys".
===========================
step 30
lua ProjectDIR/src/lmod.in.lua bash --regression_testing avail FooBar
===========================
No module(s) or extension(s) found!
If the avail list is too long consider trying:
"module --default avail" or "ml -d av" to just list the default modules.
"module overview" or "ml ov" to display the number of modules for each name.
Use "module spider" to find all possible modules and extensions.
Use "module keyword key1 key2 ..." to search for all possible modules matching any of the "keys".
===========================
step 31
lua ProjectDIR/src/lmod.in.lua bash --regression_testing purge
===========================
===========================
step 32
lua ProjectDIR/src/lmod.in.lua bash --regression_testing use ProjectDIR/rt/avail/mf/Core7
===========================
===========================
step 33
lua ProjectDIR/src/lmod.in.lua bash --regression_testing avail
===========================
ProjectDIR/rt/avail/mf/Core7
   A/1.2    B/1.0    C/3.2
If the avail list is too long consider trying:
"module --default avail" or "ml -d av" to just list the default modules.
"module overview" or "ml ov" to display the number of modules for each name.
Use "module spider" to find all possible modules and extensions.
Use "module keyword key1 key2 ..." to search for all possible modules matching any of the "keys".
===========================
step 34
lua ProjectDIR/src/lmod.in.lua bash --regression_testing load A
===========================
===========================
step 35
lua ProjectDIR/src/lmod.in.lua bash --regression_testing load B
===========================
Found C
D Not found
===========================
step 36
lua ProjectDIR/src/lmod.in.lua bash --regression_testing list
===========================
Currently Loaded Modules:
  1) A/1.2   2) B/1.0
===========================
step 37
lua ProjectDIR/src/lmod.in.lua bash --regression_testing use ProjectDIR/rt/avail/mf/Core8
===========================
===========================
step 38
lua ProjectDIR/src/lmod.in.lua bash --regression_testing avail
===========================
ProjectDIR/rt/avail/mf/Core7
   A/1.2 (L)    B/1.0 (L)    C/3.2
  Where:
   L:  Module is loaded
If the avail list is too long consider trying:
"module --default avail" or "ml -d av" to just list the default modules.
"module overview" or "ml ov" to display the number of modules for each name.
Use "module spider" to find all possible modules and extensions.
Use "module keyword key1 key2 ..." to search for all possible modules matching any of the "keys".
===========================
step 39
lua ProjectDIR/src/lmod.in.lua bash --regression_testing use ProjectDIR/rt/avail/mf/Core9
===========================
Lmod Warning: MODULEPATH directory: "ProjectDIR/rt/avail/mf/Core9" has too many non-modulefiles (101). Please make sure that modulefiles are in their own directory and not mixed in with non-modulefiles (e.g. source code)
